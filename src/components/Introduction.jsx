export default function Introduction() {
	return (
		<div className="exercice">
			<h1>Pratique du Hook useState</h1>
			<p>
				Les composants ont souvent besoin de modifier ce qui est affichÃ© Ã 
				lâ€™Ã©cran en rÃ©ponse Ã  une interaction. Par exemple, saisir du texte dans
				un formulaire devrait mettre Ã  jour le champ de saisie, cliquer sur Â«
				suivant Â» dans un carrousel dâ€™images devrait changer lâ€™image affichÃ©e,
				cliquer sur Â« acheter Â» ajoute un produit au panier dâ€™achats. Les
				composants ont besoin de Â« se souvenir Â» de certaines choses : la valeur
				saisie, lâ€™image active, le panier dâ€™achats. En React, ce type de mÃ©moire
				spÃ©cifique au composant est appelÃ© Ã©tat.
			</p>
			<p>
				Vous pouvez ajouter un Ã©tat Ã  un composant avec un Hook useState. Les
				Hooks sont des fonctions spÃ©ciales qui permettent Ã  vos composants
				dâ€™utiliser des fonctionnalitÃ©s de React (lâ€™Ã©tat en est une). Le Hook
				useState vous permet de dÃ©clarer une variable dâ€™Ã©tat. Il prend lâ€™Ã©tat
				initial en argument et renvoie une paire de valeurs : lâ€™Ã©tat actuel et
				une fonction qui vous permet de le modifier.
			</p>
			<div className="code-container">
				<div className="cm-line">
					<span className="pink">
						const [<span className="violet">count, setCount</span>] ={" "}
					</span>
					<span className="green">useState</span>{" "}
					<span className="pink">
						(<span className="violet">0</span>)
					</span>{" "}
					;
				</div>
			</div>
			<ul>
				<li>
					<span className="violet">count</span> est la variable d'Ã©tat actuelle.
				</li>
				<li>
					<span className="violet">setCount</span> est la fonction utilisÃ©e pour
					mettre Ã  jour count.
				</li>
				<li>
					0 est la valeur initiale de <span className="violet">count</span>.
				</li>
			</ul>
			<p>Pour plus d'informations, consulte le README ou la <a href="https://fr.react.dev/reference/react/useState">Doc de React !</a> ðŸ˜‰</p>
		</div>
	);
}
